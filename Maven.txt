-------------------------------------------------------------------Apache maven-------------------------------------------------------
Apache Maven is a software project management and comprehension tool. 
Based on the concept of a project object model (POM), 
Maven can manage a project's build, reporting and documentation from a central piece of information. Using maven we can build and manage any Java based project. This tutorial will teach you how to use Maven in your day-to-day life of any project development using Java.


JAVA_HOME=jdk path
MAVEN_HOME=C:\Program Files\apache-maven-3.6.3
M2_HOME=C:\Program Files\apache-maven-3.6.3
M2=%M2_HOME%/bin
path=C:\oraclexe\app\oracle\product\10.2.0\server\bin;
C:\Program Files (x86)\Common Files\Oracle\Java\javapath;
C:\Program Files (x86)\Intel\iCLS Client\;
C:\Program Files\Intel\iCLS Client\;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem;
%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\nodejs\;C:\Program Files\Git\cmd;
C:\Program Files\Java\jdk1.8.0_121;C:\Program Files\apache-maven-3.6.3\bin;C:\Windows\System32


Maven commands
mvn -v

mvn archetype:generate -DgroupId=com.p1.demo -DartifactId=MyApp -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

project--root element of POM
modelVersion--specifies the model version
artfactId--project id
dependency
scope--scope for maven such as complie,runtime,testes

<dependencies>
      <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <version>3.8.1</version>
      </dependency>
   </dependencies>  

mvn clean 
mvn complie
mvn test
mvn build 
mvn install 

1041 1046
validate 
compile
test
package-- creats the jar file but not install it to local repo
verify 
install --compile,test complie,test ,build,install in local repo
deploy

git --git hub--maven-- tested --jenkins--container  docker

automation selenium 
testing frame TestNG

steps 
1.create a project 
Although hardly a comprehensive list, these are the most common default lifecycle phases executed.

validate: validate the project is correct and all necessary information is available
compile: compile the source code of the project
test: test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed
package: take the compiled code and package it in its distributable format, such as a JAR.
integration-test: process and deploy the package if necessary into an environment where integration tests can be run
verify: run any checks to verify the package is valid and meets quality criteria
install: install the package into the local repository, for use as a dependency in other projects locally
deploy: done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects.
There are two other Maven lifecycles of note beyond the default list above. They are

clean: cleans up artifacts created by prior builds
site: generates site documentation for this project


Maven Command	Description
mvn clean	Clears the target directory into which Maven normally builds your project.
mvn package	Builds the project and packages the resulting JAR file into the target directory.
mvn package -Dmaven.test.skip=true	Builds the project and packages the resulting JAR file into the target directory - without running the unit tests during the build.
mvn install	Builds the project described by your Maven POM file and installs the resulting artifact (JAR) into your local Maven repository



Demo1:
mvn archetype:generate -DgroupId=com.mycompany.app -DartifactId=myapp -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false
mvn validate

mvn help:describe -Dplugin=compiler

added new code +pom.xml
mvn clean
mvn help:describe -Dplugin=compiler

mvn build
mvn package-- compile , testing 
mvn install -- jar 










https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
http://tutorials.jenkov.com/maven/maven-commands.html
https://www.logicbig.com/tutorials/build-tools/apache-maven/playing-with-maven-commands.html
https://maven.apache.org/plugins/index.html
https://maven.apache.org/guides/mini/guide-configuring-plugins.html


http://tutorials.jenkov.com/maven/maven-tutorial.html


profiles in maven how to activate profile
scope in maven
default scope
<offline mode>
mvn compile:compile
maven-surefire-plugin


